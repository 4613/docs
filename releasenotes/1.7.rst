#format dojo_rst

**work in progress** Current stable release notes are: `Dojo 1.6 <releasenotes/1.6>`_

Dojo 1.7 Release Notes
======================

.. contents::
   :depth: 2

===============
Browser support
===============

The following browsers are supported. If a browser is not supported, it still may work, but no effort is taken to test unsupported browsers and any specific fix for an unsupported browser is likely not to be done:

Desktop

  * Firefox 3.6,4.0,5.0
  * Safari 5 and Chrome 11
  * IE6, IE7, IE8, IE9
  * Opera 10.50 and later (Dojo core only)

Mobile (dojox/mobile)

  * iOS 4.x (Safari) (including all Dijit widgets except Editor, Dialog)
  * Android 2.2,2.3,3.0 
  * Blackberry 6 
  * Mobile compatibility on desktop browsers: IE8,IE9, Firefox 3.6/4.0, Safari5, Chrome 11

  TODO: Link to page with specific vendor device models tested on 

=========
Dojo Base
=========

AMD
---
Dojo now fully supports asynchronous loading of AMD modules. Asynchronous loading mode can be entered by setting the dojo config of "async" to true:

   .. code-block :: html

      <script data-dojo-config="async: true" src="dojo.js"></script>

Note that in async mode many modules which were implicitly loaded before now (including dojo.parser) need to be explicitly loaded.   Be sure to list all the modules you are directly using in the require() list (or via the deprecated dojo.require() syntax).

Note that many core and dijit modules have been converted to use minimal dependencies in 1.7, to support lighter footprint when used in conjunction with async loading, and AMD module format and async loading is now a fully supported feature in 1.7; however, as part of this effort, exported objects returned from dojo core modules should be treated as subject to change.  Work on tightening exported module return values/api's will continue through 1.8.

Completion of AMD conversion (Rawld etc. please fill this in)

has.js
------
Dojo 1.7 introduces support for the `has() feature detection api <dojo/has>`_.  Most Dojo core and dijit modules have been converted to use feature detection.  This work will continue for 1.8.

dojo.connect
------------
This has been refactored to use the new dojo/on module for event handling. See dojo/on below for more information.

=========
Dojo Core
=========

dojo/on
-------

This new module provides a new event handling system with support for a number of new features including:

 - event delegation - Event types can include selectors to specify targets like on(list, "li:click", onListItemClickHandler);
 - extension events - Custom event types can be used (and created). New dojo.gestures implement extension events.
 - pausable events - Event handling can be paused with the on.pausable function.
 - execute-once events - Listeners can be set to fire only once with on.once.
 - emitting events - Native style events can be dispatched with on.emit(target, "click", event);
 - self-contained handles - Objects returned on() calls contain remove() method to directly stop listening to an event.
 - touch event normalization - Touch events are normalized across Android, iOS, etc.
 - has()-based feature detection - This makes possible to create browser specific builds that exclude unneeded features (like IE normalization)

This also sheds some of the legacy keypress event handling code (best practice is to use keydown instead), and reduces code size. 

dojo/query
----------
This new module provides access to the DOM querying functionality (like dojo.query). This module can also be loaded with alternate selector engines like Sizzle, Slick, or the new Dojo lite query selector engine or with minimum CSS compliance levels for auto selector engine selection. In asynchronous mode (see new Dojo config settings), dojo/query will load the lite engine to use native browser querySelectAll, and only load the full acme selector engine if needed. dojo/query works with the new has() branching functionality to make it easy to create browser specific builds with the minimal selector engine needed for the browser.

dojo/data/ObjectStore
---------------------
This module has been updated to broadcast notifications originating from the underlying object store if that store is "Observable". If the underlying object store provides an observe() method on results (usually be wrapping with dojo.store.Observable), than the dojo/data/ObjectStore wrapper can listen to changes in the object store and send out dojo.data notification events.


Parser
------
The parser has been enhanced so you can specify browser native attributes just like native tags, but specify other attributes in data-dojo-props, for example:

   .. code-block :: html

       <input data-dojo-type="dijit.form.TextBox" name="dept"
            data-dojo-props="scrollOnFocus: true"/>

We've also fixed a number of parser bugs like how buttons with no type specified because type=submit on IE, rather than type=button.


dojo/touch
----------

This new module provides a device neutral way to handle touchstart | touchmove | touchend with the native event properties normalized. 

dojo/touch is based on `dojo/on <dojo/on>`_ and the following sample usage can work well across desktop and touch devices(Andriod 2.3/2.3 and iOS3+ for 1.7):

   .. code-block :: javascript
      
      //listen to 'touchstart' on touch devices and 'mousedown' on desktops
      dojo.touch.press(node, function(e){});

Please refer to `dojo/touch doc(TODO) <dojo/touch>`_ for more details.


dojo/gesture
------------

Based on dojo.touch and dojo.on, this new module provides a mechanism to write gestures working well on difference devices including desktops(single gestures) and various touch devices. 

This new module provides following functionalities(most of them are used internally by various gesture instances):

- Register/un-register a global singleton gesture instance
- Bind dojoj/on handlers for each gesture event e.g. tap, taphold, doubletap ...
- Fire a gesture event on the target node
 
dojo/gesture/tap

- Provide common single-touch tap gestures including tap, tap.hold and tap.doubletap
- Customizable settings e.g. threshhold for tap.hold, effective radius for a valid tap.doubletap
 
dojo/gesture/swipe

- Provide common single-touch swipe gestures including swipe, swipe.left | right | up | down
- Customizable settings e.g. swipeSpeed, valid swipeRange
 
Please also refer to `dojo/gesture doc(TODO) <dojo/gesture>`_ for how to write a new gesture instance


=====
Dijit
=====

_TemplatedMixin, _WidgetsInTemplateMixin
----------------------------------------
A new mixin called _TemplatedMixin has been added.  It's lighter weight than _Templated and supports templated widgets which *don't* have widgets in templates.  New widgets should be built using _TemplatedMixin.   Additionally, widgets that need the widgetsInTemplate functionality should also mixin _WidgetsInTemplateMixin.

_Templated's functionality and API haven't changed.

_setXXXAttr
-----------
Previously _setXXXAttr was a function to set a widget attribute.   It can still be a function, but now it can also be an object like one of the values from attributeMap.

For example, this will copy the widget's tabIndex attribute to this.focusNode.tabIndex

   .. code-block :: javascript

       _setTabIndexAttr: "focusNode"

And with the code below, myWidget.set("title", "hello world") will set this.titleNode.innerHTML to "hello world":

   .. code-block :: javascript

       __setTitleAttr: { node: "titleNode", type: "innerHTML" }


This replaces attributeMap, which is deprecated and will be removed in 2.0.


dijit/focus, dijit/place, and dijit/popup
-----------------------------------------
The focus, place, and popup modules in dijit/_base have been promoted to dijit/, so they can be included explicitly by applications that don't want to include all of dijit/_base.

There are a few API changes in the top level modules compared to the ones in dijit/_base (although for backwards compatibility the modules in dijit/_base maintain their old API):

  - Popup.around() (analogous to dijit.popup.placeAroundElement()) takes a position parameter like ["before", "after"] rather than a set of tuples like {BL: "TL", ...}.   In other words, popup.around() replaces dijit.popup.placeAroundElement() but instead of dijit.getPopupAroundAlignment(xyz), just pass in xzy directly.
  - dijit/focus doesn't include the selection related code, just focus related code
  - dijit/focus provides watch() and on() methods to monitor the focused node and active widgets, rather than publishing topics focusNode, widgetBlur, and widgetFocus
  - some methods in dijit/_base/popup used to take DOMNodes or widgets as a parameter; now they just take a widget

Also note that the new dijit/popup module is only available through the new AMD API, ex:

   .. code-block :: javascript

      require(["dijit/popup"], function(popup){ popup.open(...); });

 
CalendarLite
------------
dijit.CalendarLite is a new widget aimed towards mobile use.   It's like Calendar but doesn't have keyboard support or a drop down to select the month.

ComboBox, FilteringSelect
-------------------------
These classes have been enhanced to accept a `dojo.store <dojo/store>`_ (the new store API) for the store parameter. 
The old 
