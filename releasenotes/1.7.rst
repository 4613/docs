#format dojo_rst

**work in progress** Current stable release notes are: `Dojo 1.6 <releasenotes/1.6>`_

Dojo 1.7 Release Notes
======================

.. contents::
   :depth: 2

===============
Browser support
===============

The following browsers are supported. If a browser is not supported, it still may work, but no effort is taken to test unsupported browsers and any specific fix for an unsupported browser is likely not to be done:

Desktop

  * Firefox 3.6/4.0
  * Safari 5 and Chrome 11
  * IE6, IE7, IE8, IE9
  * Opera 10.50 and later (Dojo core only)

Mobile (dojox/mobile)

  * iOS 4.x (Safari)
  * Android 2.2,2.3,3.0 
  * Blackberry 6 
  * Mobile compatibility on desktop browsers: IE8,IE9, Firefox 3.6/4.0, Safari5, Chrome 11

  TODO: Link to page with specific vendor device models tested on 

=========
Dojo Base
=========

AMD
---
Completion of AMD conversion (Rawld etc. please fill this in)


=========
Dojo Core
=========

Parser
------
The parser has been enhanced so you can specify browser native attributes just like native tags, but specify other attributes in data-dojo-props, for example:

   .. code-block :: html

       <input data-dojo-type="dijit.form.TextBox" name="dept"
            data-dojo-props="scrollOnFocus: true"/>

We've also fixed a number of parser bugs like how buttons with no type specified because type=submit on IE, rather than type=button.

=====
Dijit
=====

_TemplatedMixin, _WidgetsInTemplateMixin
----------------------------------------
A new mixin called _TemplatedMixin has been added.  It's lighter weight than _Templated and supports templated widgets which *don't* have widgets in templates.  New widgets should be built using _TemplatedMixin.   Additionally, widgets that need the widgetsInTemplate functionality should also mixin _WidgetsInTemplateMixin.

_Templated's functionality and API haven't changed.

_setXXXAttr
-----------
Previously _setXXXAttr was a function to set a widget attribute.   It can still be a function, but now it can also be an object like one of the values from attributeMap.

For example, this will copy the widget's tabIndex attribute to this.focusNode.tabIndex

   .. code-block :: javascript

       _setTabIndexAttr: "focusNode"

And with the code below, myWidget.set("title", "hello world") will set this.titleNode.innerHTML to "hello world":

   .. code-block :: javascript

       __setTitleAttr: { node: "titleNode", type: "innerHTML" }


This replaces attributeMap, which is deprecated and will be removed in 2.0.


dijit/focus, dijit/place, and dijit/popup
-----------------------------------------
The focus, place, and popup modules in dijit/_base have been promoted to dijit/, so they can be included explicitly by applications that don't want to include all of dijit/_base.

There are a few API changes in the top level modules compared to the ones in dijit/_base (although for backwards compatibility the modules in dijit/_base maintain their old API):

  - Popup.around() (analogous to dijit.popup.placeAroundElement()) takes a position parameter like ["before", "after"] rather than a set of tuples like {BL: "TL", ...}.   In other words, popup.around() replaces dijit.popup.placeAroundElement() but instead of dijit.getPopupAroundAlignment(xyz), just pass in xzy directly.
  - dijit/focus doesn't include the selection related code, just focus related code
  - dijit/focus provides watch() and on() methods to monitor the focused node and active widgets, rather than publishing topics focusNode, widgetBlur, and widgetFocus
  - some methods in dijit/_base/popup used to take DOMNodes or widgets as a parameter; now they just take a widget

Also note that the new dijit/popup module is only available through the new AMD API, ex:

   .. code-block :: javascript

      require(["dijit/popup"], function(popup){ popup.open(...); });

 
CalendarLite
------------
dijit.CalendarLite is a new widget aimed towards mobile use.   It's like Calendar but doesn't have keyboard support or a drop down to select the month.

ComboBox, FilteringSelect
-------------------------
These classes have been enhanced to accept a `dojo.store <dojo/store>`_ (the new store API) for the store parameter. 
The old `dojo.data API <dojo/data/api/Read>`_ is still supported.

=====
DojoX
=====

Charting
--------
  - New zoom, pan, data indicator interactions have been committed in the action2d package. They allow users to interact with the chart using either mouse or touch gestures.
  - Various improvement to improve performances on particular on mobile devices (new enableCache parameter on most plot type to allow caching and reuse of gfx shapes)
  - use of AMD module format 
  - Bidi text support has been added through two BidiSupport classes (one for dojox.charting, one for dojox.charting.widget). This classes need  to be required by your application in order for Bidi text support to be enabled.

Gauges
-------
  - The gauges that were previously located in the dojox.widget namespace have been moved to dojox.gauges.
  - Several new indicators have been added to create your custom gauges, for example a text indicator to draw the value of the gauge as a text.
  - The circular gauge can now be created clockwise or counter-clockwise.
  - The layout of labels in the circular scale are improved.
  - Gauges now support touch interaction on mobile devices.
  - dojox.gauges now uses the AMD module format
  - Three new pre-built gauges with a glossy look are now available : The GlossyHorizontalGauge, the GlossyCircularGauge and the GlossySemiCircularGauge.

GeoCharting Maps
----------------
  - Various improvements of the dojox.geo.charting module like tooltip management, color change animation when changing data series.
  - New dataStore structure, new data binding between the map element and the dataStore element.
  - Allow interactive zoom/pan of the map using either mouse or touch gestures, through the installation of dedicated interactor classes.
  - New Map Dijit component wrapping the non-dijit dojox.geo.charting Map component, for easier integration.
  - Use of AMD module format.

Gfx
---
  - Shapes are now identified via an associated unique id (Shape.getUID()). Coupled to this, the new dojox.gfx.shape.byId() function returns the shape associated with a given id.   
  - Add input events support to canvas renderer. It is enabled by default and can be disabled by setting the djConfig 'canvasEvent' flag to 'false'.
  - The gfx shape targeted by a mouse event can be retrieved from the event itself by means of the 'gfxTarget' event property:

   .. code-block :: javascript

      group.connect("onmousedown", function(evt){ var s = evt.gfxTarget; ... });

Mobile
------
 - BlackBerry theme has been added.
 - dojox.mobile.deviceTheme is a device theme loader, which detects the mobile device being used and automatically loads an appropriate theme
 - New SpinWheel widget allows you to select values from spin wheels. Two variations, SpinWheelDatePicker and SpinWheelTimePicker, are also available.
 - New Carousel widget shows a list of images from which you can select an item.
 - New RoundRectDataList and EdgeToEdgeDataList widgets are data-driven versions of the RoundRectList and EdgeToEdgeList.
 - New PageIndicator widget shows the current page of swap views with small dots. It can be used with SwapView or Carousel.
 - Several new transition animations have been added: Dissolve, Flip2, Cover, Reveal, Slide Vertical, Cover Vertical, Reveal Vertical, Swirl, Zoom In/Out, and Scale In/Out.
 - The FlippableView widget has been renamed to SwapView.
 - dojox.mobile now uses the AMD module format
 - TextBox widget moved from mobile/app/ to mobile/.
 - New Tooltip widget to popup a container for either simple text or another wiget.
 - New Overlay widget to slide up form the bottom another input widget, and then slides down when done.
 - New Opener widget adds runtime screen-size detection and uses Tooltip for the larger mobile devices, and Overlay on small-screen devices.
 - New ComboBox widget (still experimental) that combines searchable text input similar to dijit.form.ComboBox.
 - New ExpandingTextarea widget grows and shrinks vertically as needed to accomodate the end-user text.
 - New Slider widget to enable users to easily adjust a value with touch/dragging gestures.
 - New HTML form input widget wrappers (Textarea, CheckBox, RadioButton) to allow simple form constructs to be used with various dijit container/dialog widgets.

MVC
---
  dojox.mvc is a new experimental dojox project about separation of MVC concerns on the client, thereby easing the development of data-rich applications using Dojo (enterprise apps, IT apps, CRUD scenarios, patterns like master-detail and others). This first release contains:

  - A first-class data model which can talk to data stores
  - Data binding mixin that allows widgets or arbitrary view components to bind to locations in above data model
  - MVC containers like group (for hierarchical data) and repeat (for repeating data i.e. arrays)
  - MVC widgets such as data-bound output and data-driven simple UI generator
  - Samples for number of data-rich patterns that can be built using the above

OpenLayers Maps
---------------
  - New dojox.geo.openlayers mapping package based on the OpenLayers library (See http://www.openlayers.org/ ).
  - Allow user to add georeferenced Gfx shapes on a background map.
  - Allow user to place georeferenced widgets on the map.
  - Use of AMD module format.

====
Util
====

=========
Migration
=========

Dijit
-----
- Many widgets which used to extend _Templated now extend _TemplatedMixin.   If you have custom widgets that extend standard widgets, and use widgetsInTemplate: true, you may need to also mixin dijit._WidgetsInTemplate

- The dijit.Calendar template has been modified to have ${!dayCellsHtml} and ${!dateRowsHtml} variables for the M-F (days of week) row, and the 1-31 days-of-the-month cells.  Custom calendar templates should be updated to contain these variables rather than markup for those sections.  If custom versions of Calendar need to modify the structure of days-of-week or days-of-month cells, they can override the new Calendar attributes: dowTemplateString, dateTemplateString, and weekTemplateString.

- If you have specified a custom labelFunc() for a dijit.form.ComboBox/FilteringSelect, it will be passed an item and store of the new `dojo.store <dojo/store>`_ API.   This generally won't be a problem unless you are depending on internals of the item (ex: depending on item being a DOMNode rather than a javascript hash), or accessing the store as a global variable rather than as the second parameter to the labelFunc() callback.

- If you want to allow for rich text saving with back/forward actions, you must add a text area to your page with the id==dijit._scopeName + "._editor.RichText.value" (typically "dijit._editor.RichText.value). For example:

   .. code-block :: javascript

	<textarea id="dijit._editor.RichText.value" style="display:none;position:absolute;top:-100px;left:-100px;height:3px;width:3px;overflow:hidden;"></textarea>

Previously this was done automatically in general (although it was always necessary for XD builds).
