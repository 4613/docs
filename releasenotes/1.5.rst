#format dojo_rst

Dojo 1.5 Release Notes (in progress)
====================================

.. contents::
   :depth: 3

=========
Dojo Core
=========

dojo.cldr
---------

Updated cultural tables to use CLDR 1.8 (unicode.org/cldr) for formatting of numbers, currencies, and dates.

dojo.Deferred, dojo.when
------------------------

dojo.Deferred was refactored for side effect free chaining, such that you can execute code like:

.. code-block :: javascript

    var def = dojo.xhr(...);
    def.then(...);
    def.then(...);


without worrying that the first then() call will affect the value passed to the second then call.

It also allows chaining where each element in the chain does affect the value, like this:

.. code-block :: javascript

      dojo.xhr(...).then(function(val){ return dojo.toJson(val); }).then(...);

Finally, dojo.when() is a method that will take either a Deferred or a plain value and execute some code when that value is ready (for a Deferred) or immediately otherwise.

.. code-block :: javascript

    // val might be a Deferred, or it could be (for example) a String
    dojo.when(val, function(val){
          ...
    });


dojo.window, dojo.uacss
-----------------------

Some functions from dijit have been moved to dojo core (with stubs left in dijit for backwards compatibility).

 - dojo.require("dojo.uacss") will add classes to the <html> node like dj_ie, representing the browser, browser version, box model, etc.  Formerly dojo.require("dijit.sniff").
 - dojo.window.getBox() get's the viewport size.   Formerly dijit.getViewport().
 - dojo.window.get() converts a document to the corresponding window.   Formerly dijit.getDocumentWindow()
 - dojo.window.scrollIntoView(): scrolls a node into view, similar to node.scrollIntoView() but working around browser quirks.   Formerly dijit.scrollIntoView().

dojo.Stateful
-------------

A new generic interface and base class for getting, setting, and watching for property changes (with getters and setters) in a consistent manner.
 
See also: 

* `Documentation dojo.Stateful (todo) <dojo/Stateful>`_
* `Ticket #10839 <http://bugs.dojotoolkit.org/ticket/10839d>`_


=====
Dijit
=====

Claro theme
-----------
A new theme for dijit has been released for dijit and the grid called Claro (nee Lucid).  The Claro theme has several aims:

   - it delivers a modern and engaging visual style for rich internet applications using the Dojo Dijit library, with the visual enhancements of transparent gradient background images, drop shadows, and appropriate CSS animation (on webkit and mozilla);
   - it delivers the 'fit and finish' professional quality with consistent padding, font treatment and alignment; and fixed missing expected behavioral states (hover, active and selected) in widgets;
   - it improves ease of customizing the theme CSS that is allowing designers to easily create their own them by styling elements such padding and color without designing new images. 

The Claro theme supports both LTR and RTL and all the browsers, including IE6, albeit with graceful degradation of some styling (no gradient shading and 8-bit colored icons); and graceful degradation in IE6, 7 and 8 with square corners.

For more details on Dijit themes (Claro, Tundra, Nihilo and Soria) and theming, see `http://docs.dojocampus.org/dijit-themes`_.

ColorPalette
------------
The styling was changed to put a white border around each color swatch, so that it's clear when the dark swatches are being hovered or focused.   In addition, focus was decoupled from hovering.

Additionally, ColorPalette now supports attr("value", ...) (both as a getter and setter), and indicates the currently selected color via a thin black border around that color.   The editor's foreground and background color plugins also indicate the color of the currently selected text (or if no text is selected, the text around the caret).

Dialog
------
The dialog widget now supports an "action bar", a gray bar at the bottom of the dialog with action buttons, typically OK and cancel.  Simply create your dialog as before but separate the dialog contents from the buttons like this:

.. code-block :: html

	<div dojoType="dijit.Dialog">
		<div class="dijitDialogPaneContentArea">
			...
		</div>

		<div class="dijitDialogPaneActionBar">
			<button dojoType="dijit.form.Button" type="submit" id="ok">OK</button>
			<button dojoType="dijit.form.Button" type="cancel" id="cancel">Cancel</button>
		</div>
	</div>


Input Widgets
-------------
The HTML5 placeholder parameter (also known as a "hint") has been implemented for all TextBox based widgets.   Placeholder is gray example or hint text that the widget displays inside the input area of empty form fields, such as "John Doe" or "Your Name".   The text disappears when the user focuses the field.

Also, the width/height of the input widgets (TextBox, ValidationTextBox, ComboBox/FilteringSelect, NumberSpinner) has been standardized.   Previously the height or width of these widgets could differ by a few pixels making the UI look a little off.

Bidi enhancements
-----------------
An app can now set text-rendering direction per-widget, via the dir attribute.  Possible settings are "ltr" (left-to-right, used by most languages) and "rtl" (for Arabic and Hebrew).   Previously all the widgets rendered in the same direction, the direction of the page. Note that this attribute can only be set at creation.   For example:

.. code-block :: javascript

    new dijit.Editor({dir: "rtl"}, srcNodeRef);
    new dijit.Editor({dir: "ltr"}, srcNodeRef);


Also, the parser has been refactored and now is cognizant of dir=rtl and dir=ltr settings on nodes (with or without dojoType specified).   If a node has a dir setting, then all the widgets beneath that node are created with that dir attribute specified.  For example:

.. code-block :: html


	<div dir="ltr">
		<input dojoType="dijit.TextBox">
		<input dojoType="dijit.TextBox">
		<input dojoType="dijit.TextBox">
	</div>
	<div dir="rtl">
		<input dojoType="dijit.TextBox">
		<input dojoType="dijit.TextBox">
		<input dojoType="dijit.TextBox">
	</div>



The parser can also take a flag specifying default dir and lang for inherited widgets:

.. code-block :: javascript

      dojo.parser.parse({rootNode: ..., inherited: {dir: rtl, lang: "ar-eg"} });

(In general though it's not necessary to specify, as the parser will pick up the documents default direction and language.)


These two changes allow things like a portal page where different portlets are in different languages, or a page in an RTL language like Hebrew or Arabic but with one section in English.

Tundra and Claro themes support mixed RTL and LTR pages.

Internally, this feature is implemented by dir=rtl widgets applying a CSS class like dijitTextBoxRtl (the widget's baseClass + "Rtl") to the widget's root node, in addition to applying the plain baseClass like dijitTextBox.   The tundra and claro themes have been modified to reference those per widget CSS classes rather than referencing the dijitRtl class applied to the BODY node.

Finally, note that although (as before) lang can be set on a per-widget basis, the translations used by dojo (default tooltips, loading messages, etc.) are still one language per page.

_CssStateMixin
--------------

New mixin for widgets that set CSS classes on their nodes depending on hover/active/focused state, and also semantic state (checked, selected, disabled, etc.).  Most of the dijit widgets have been updated to use this mixin.   As a result, there are more selectors available than before, such as CSS classes for when the slider handle is hovered or when the increment button is depressed.

To use this mixin in custom widgets:

1. require _CssStateMixin and mix it in to the widget:

.. code-block :: javascript

    dojo.require("dijit._CssStateMixin");
    ...
    dojo.declare(myWidget, [ ..., dijit._CssStateMixin], ...

*Note that all form widgets already inherit _CssStateMixin through _FormWidget, so they should skip this step*


2. set baseClass if not already set *(form widgets already set baseClass)*

.. code-block :: javascript

    baseClass: "dijitSlider",

3. (If you want CSS class settings on widget subnodes, like the up/down buttons on the slider, then) set cssStateNodes attribute:

.. code-block :: javascript

    cssStateNodes: {
       incrementButton: "dijitSliderIncrementButton",
       decrementButton: "dijitSliderDecrementButton",
       focusNode: "dijitSliderThumb"
    }

The left side (ex: incrementButton) is the dojoAttachPoint name, and the right side ("dijitSliderIncrementButton") is used to construct the CSS class name to apply to the node.

After the steps above, CSS classes will automatically be applied to the slider domNode (dijitSliderHover, dijitSliderFocused etc.) in addition to the specified sub nodes (this.incrementButton --> "dijitSliderIncrementButtonActive" CSS class etc.).

Note that there's no event handling code for hover/active/focus CSS needed in the widget template

Migration
~~~~~~~~~

If you have modified widget templates to dijit widgets, you will probably have some onmouseenter/onmouseleave/onfocus/onblur handlers that should be removed.   In particular, _onMouse() has been removed from _FormWidget so you should remove calls to it from custom templates.

In addition, if you have custom CSS rules, there were a few changes about form widget classes with nested buttons, seen in http://bugs.dojotoolkit.org/changeset/21117:

Spinner:

====================================================== =============================================        ===========
Old                                                    New                                                  Description
====================================================== =============================================        ===========
.dijitSpinnerUpArrowHover .dijitUpArrowButton          .dijitSpinner .dijitUpArrowButtonHover
.dijitSpinnerUpArrowActive .dijitUpArrowButton         .dijitSpinner .dijitUpArrowButtonActive
.dijitSpinnerDownArrowHover .dijitDownArrowButton      .dijitSpinner .dijitDownArrowButtonHover
.dijitSpinnerDownArrowActive .dijitDownArrowButton     .dijitSpinner .dijitDownArrowButtonActive
====================================================== =============================================        ===========

ComboButton:

====================================================== =============================================        ===========
Old                                                    New                                                  Description
====================================================== =============================================        ===========
.dijitComboButtonHover .dijitButtonContents            .dijitComboButton .dijitButtonContentsHover
.dijitComboButtonActive .dijitButtonContents           .dijitComboButton .dijitButtonContentsActive
.dijitComboButtonDownArrowHover .dijitDownArrowButton  .dijitComboButton .dijitDownArrowButtonHover
.dijitComboButtonDownArrowActive .dijitDownArrowButton .dijitComboButton .dijitDownArrowButtonActive
====================================================== =============================================        ===========


Other changes occurred to CSS selectors to standardize the names, as follows:

Accordion:

====================================================== =============================================        ===========
Old                                                    New                                                  Description
====================================================== =============================================        ===========
.dijitAccordionFocused                                 .dijitAccordionTitleFocused                          The accordion title is focused, not the pane contents
.dijitAccordionTitle-hover                             .dijitAccordionTitleHover
.dijitAccordionTitle-selected                          .dijitAccordionTitleSelected
====================================================== =============================================        ===========

In addition, the accordion layout was changed so that every pane is surrounded by a dijitInnerAccordionContainer <div>, which holds the title and the content, similar to a TitlePane.   If you are subclassing AccordionContainer or doing something else related to the internals of AccordionContainer you may need to update your code.

TabContainer:

====================================================== =============================================        ===========
Old                                                    New                                                  Description
====================================================== =============================================        ===========
.dijitTab .closeButton                                 .dijitTabCloseButton
.dijitTab .closeButton-hover                           .dijitTabCloseButtonHover                            close button for individual tab
.dijitTabBtnDisabled                                   .dijitTabDisabled                                    left and right scroll buttons on tab strip
.dijitTab .closeImage                                  .dijitTabCloseIcon                                   icon inside of close button
.dijitTab .closeText                                   .dijitTabCloseText                                   text inside of close button, for a11y
.tabStripButton img                                    .dijitTabStripIcon                                   class for tabstrip's scroll-left, scroll-right, and menu icons
.tabStripMenuButton img                                .dijitTabStripMenuIcon                               icon to show menu (listing all tabs)
.tabStripSlideButtonLeft img                           .dijitTabStripSlideLeftIcon                          icon to scroll tabs to left
.tabStripSlideButtonRight img                          .dijitTabStripSlideRightIcon                         icon to scroll tabs to right
====================================================== =============================================        ===========

Dialog:

====================================================== =============================================        ===========
Old                                                    New                                                  Description
====================================================== =============================================        ===========
.dijitDialogCloseIcon-hover                            .dijitDialogCloseIconHover
====================================================== =============================================        ===========

Tree:

====================================================== =============================================        ===========
Old                                                    New                                                  Description
====================================================== =============================================        ===========
.dijitTreeNodeHover                                    .dijitTreeRowHover                                   on the TreeNode.rowNode domNode
.dijitTreeNodeSelected                                 .dijitTreeRowSelected
====================================================== =============================================        ===========


TitlePane:

====================================================== =============================================        ===========
Old                                                    New                                                  Description
====================================================== =============================================        ===========
.dijitTitlePaneTitle-hover                             .dijitTitlePaneHover
====================================================== =============================================        ===========


InlineEditBox:

====================================================== =============================================        ===========
Old                                                    New                                                  Description
====================================================== =============================================        ===========
.dijitInlineEditBoxDisplayMode-hover                   .dijitInlineEditBoxDisplayModeHover
.dijitInlineEditBoxDisplayMode-disabled                .dijitInlineEditBoxDisplayModeDisabled               equivalent to a plain <div> or <span>, clicking has no effect
====================================================== =============================================        ===========

Editor:

====================================================== =============================================        ===========
Old                                                    New                                                  Description
====================================================== =============================================        ===========
.RichTextEditable                                      .dijitEditor                                         editor's root node
====================================================== =============================================        ===========


Tree
----
Decoupled concepts of "focused node" and "selected node", so that:

   1. A tree doesn't start with any node mark as selected.   App needs to call attr("selectedItem", ...) or attr("path", ...) to mark the currently selected node.  Clicking a node will also select it, but not clicking the expando (plus-sign).

   2. Using arrow keys to navigate in a Tree will not change the selected item.


dijit.popup
-----------
Dijit.popup shouldn't be shortcutted.   This will work:

.. code-block :: javascript

   dijit.popup.open({...});

However, this will not:

.. code-block :: javascript

   var open = dijit.popup.open;
   open({...});


widget.attr()
-------------

In order to make code clearer, Dojo Toolkit 1.5 will start to use the get()/set() pattern for code-controlled property access instead of the former used .attr()-Method, which has handled both gets and sets.

Coming with this, the recommended way to set properties of Dijits changes from

.. code-block :: javascript

   widget.attr('property', 'value'); // old way and now deprecated for Dijits

to

.. code-block :: javascript

   widget.set('property', 'value'); // new since 1.5

The same for getting properties:

.. code-block :: javascript

   widget.attr('property'); // old way and now deprecated for Dijits

changes to

.. code-block :: javascript

   widget.get('property'); // new since 1.5


=====
DojoX
=====

Charting
--------

- Several incremental enhancements to the DataPresentation widget, including support for custom tooltips, layout/wrapping options for the chart legend, ability to suppress the chart labels,   and 'hooks' into the rendering.
- Comprehensive support for space-based gradients.
- Themes can specify arbitrary fills, including gradients and patterns.
- Bar and Column-based charts now support objects as values (you can specify custom tooltips, colors, fills now).
- Scatter plot implements a gradient field-style color-coding.
- Numerous bugfixes.


To be moved:

- New 'Map Chart' widget ( dojox.charting.Map ) provides an easy way to display geographical map data.  ( eg: maps for USA, Europe, Asia etc... )

Pending:

- Data series now support 'nulls' ( no data available )
- Allow a combination of theme-based and custom styles
- Charting animation (grow/zoom) for areas, lines and markers
- Chart axis labels can now be rotated (clockwise or anticlockwise ) through any desired angle.


Editor
------

- Smiley plugin (existed in 1.4 but wasn't working; now it does)

- `dojox.editor.plugins.CollapsibleToolbar <dojox/editor/plugins/CollapsibleToolbar>`_ -- A plugin that modifies the header of the grid and converts it to a collapsible toolbar.  This plugin has been well tested and is known to work well in all browsers supported by dojo.

- `dojox.editor.plugins.Blockquote <dojox/editor/plugins/Blockquote>`_ -- A plugin that adds a blockquoting button to the toolbar.  All text that is part of a block of text will be wrapped in a blockquote tag when applied, or removed from a blockquote tag when untoggled.  It will also work across large selections, blockquoting each chunk of text and inline elements as a blockquote block.  This plugin has been well tested and is known to work well in all browsers supported by dojo.

- `dojox.editor.plugins.PasteFromWord <dojox/editor/plugins/PasteFromWord>`_ -- A plugin that adds a 'paste from word' icon to the toolbar.  It opens a dialog where content from Word or similar programs can be pasted in, then filters are run against the input to remove extraneous HTML that causes the editor difficulty, leaving the injected content cleaner HTML.

- `dojox.editor.plugins.InsertAnchor <dojox/editor/plugins/InsertAnchor>`_ -- A plugin that adds an 'insert anchor' icon to the toolbar.  An anchor is a specialized <a> tag used for linking to specific sections of a document.  The plugin highlights (makes visible), via css what is an anchor in the page.  It also allows for double-click editing of anchors.


GFX
---

- VML renderer simulates linear gradients of SVG now.
- More precise calculations of a bounding box for VML Path.
- SVGWeb (SVG on Flash) is supported as an option for SVG renderer.
- Numerous bugfixes.


Mobile
------
dojox.mobile is set of lightweight widgets designed specifically for mobile plans, with themes for iPhone and android.   It supports buttons, on/off switch, lists "tab container", etc

====
Util
====

Build System/buildscripts
-------------------------

* By default the copyTests option defaults to false instead of true now. This was done to help reduce the possibility of copying tests in their builds, extra files and more security concerns to worry about.
* Updated cldr scripts to use CLDR version 1.8 (see dojo.cldr)
