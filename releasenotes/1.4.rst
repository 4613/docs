#format dojo_rst

Dojo 1.4 Release Notes
=======================

.. contents::
   :depth: 3

===============
Browser support
===============

The following browsers are supported. If a browser is not supported, it still may work, but no effort is taken to test unsupported browsers and any specific fix for an unsupported browser is likely not to be done:

* Firefox 2 support dropped. Firefox V3 and V3.5 supported.
* Latest Safari (Safari v4) and latest Chrome (Chrome v3) supported, but not previous versions.
* IE6, IE7, IE8 all supported
* Keyboard now supported in all browsers (previously it didn't work in safari and on chrome)

====
Dojo
====

IO Pipeline Topics
------------------

* Now there are topics that are published for the pipeline used to handle all IO operations. dojo.xhr, dojo.io.script and dojo.io.iframe all use the IO pipeline, so they can all publish the pipeline topics.
* By default, the topics are turned off. To enable them, set **djConfig.ioPublish = true**. After they are globally enabled, you can disable them for specific IO requests by setting **ioPublish: false** in the arg object you pass to dojo.xhr*, dojo.io.script.get() or dojo.io.iframe.send().
* See `IO Pipeline Topics <dojo/ioPipelineTopics>`_ for more information.


dojo.addOnLoad
--------------

* There was a dojo.require/onload fix done for Firefox browsers (see `Ticket #8976 <http://bugs.dojotoolkit.org/ticket/8976>`_).
* See also `dojo.addOnLoad <dojo/addOnLoad>`_


dojo.cache
----------

* A new method has been added for caching data from files. In particular it's used in templated widgets in conjunction with templateString, rather than templatePath.
* See also `dojo.cache <dojo/cache>`_


dojo.cldr (Dojo i18n)
---------------------

* The cultural tables have been updated to version 1.7.1 of the Unicode CLDR http://unicode.org/cldr
* See also `dojo.cldr <dojo/cldr>`_


dojo.contentHandlers
--------------------

* Exposed previously "private" dojo._contentHandlers as a public way to write custom XHR handleAs functions
* See also `dojo.contentHandlers <dojo/contentHandlers>`_


dojo.coord
----------

* This method in Dojo Base has been deprecated in Dojo 1.4. The returned object is a mixin of `dojo.position <dojo/position>`_ and `dojo.marginBox <dojo/marginBox>`_. Because the x/y position is based on the border-box and the (w)idth/(h)eight attributes represent the margin-box, there was considerable confusion on correctly using the returned object. The new method `dojo.position <dojo/position>`_ performs much faster. Users needing the l/t/w/h attributes from this method can continue to use `dojo.marginBox <dojo/marginBox>`_.
* See also `dojo.position <dojo/position>`_


dojo.declare
------------

* A drop-in replacement is committed, which is generally faster, and introduces enhancements to the familiar functionality. The announcement link: http://groups.google.com/group/dojo-interest/msg/4a22b20587e91d27
* See also `dojo.declare <dojo/declare>`_

TODO: document or link to blog post (Eugene)


dojo.fieldToObject
------------------

* A new method in Dojo Base (part of dojo.js) that is related to dojo.formToObject(), except instead of converting a whole form to an object, it just converts one form field. Pass it a DOM Node for the field, or the ID of the form field as a string. dojo.fieldToObject returns the value encoded in a form field as as a string or an array of strings. Disabled form elements and unchecked radio and checkboxes are skipped. Multi-select elements are returned as an array of string values.
* See `dojo.fieldToObject <dojo/fieldToObject>`_ for more information.


dojo.fx (Dojo Base FX)
----------------------

* Considerable performance increase and new API's
* made dojo._Animation public: dojo.Animation
* onEnd, beforeBegin functions are passed the node reference used in the Animation
* start: and end: properties, when using a function, are passed the node reference for the animtion
* each property can now be a function, returning either a value, or and object to pass as the value
* See also `dojo.fx <dojo/fx>`_


dojo.hash
---------

* A new method for monitoring, getting and setting the hash value. dojo.hash provides hashchange notification using a new published topic "/dojo/hashchange", enabling cross-browser back/forward support and bookmarkability in AJAX applications. The native HTML 5 onhashchange event is used behind the scenes in browsers that support it.
* See also `dojo.hash <dojo/hash>`_


dojo.NodeList-traverse and dojo.NodeList-manipulate
---------------------------------------------------

* Two mixins for dojo.NodeList are now available. dojo.NodeLists are returned from dojo.query() calls.

  * `dojo.NodeList-traverse <dojo/NodeList-traverse>`_  adds methods:

    * children
    * closest
    * parent
    * parents
    * siblings
    * next
    * nextAll
    * prev
    * prevAll
    * andSelf
    * first
    * last
    * even
    * odd

  * `dojo.NodeList-manipulate <dojo/NodeList-manipulate>`_  adds methods:

    * innerHTML
    * html
    * text
    * val
    * append
    * appendTo
    * prepend
    * prependTo
    * after
    * insertAfter
    * before
    * insertBefore
    * remove
    * wrap
    * wrapAll
    * wrapInner
    * replaceWith
    * replaceAll
    * clone

* Both mixins are modeled after the jQuery APIs that have the same names.


dojo.position
-------------

* A new method in Dojo Base (part of dojo.js) that returns the beginning x/y of a DOM node's border-box as well as it's width and height. An optional boolean parameter can be specified to change the default coordinate origin point from the viewport to the document root.
* See also `dojo.position <dojo/position>`_


dojo.ready
----------

* A new alias for `dojo.addOnLoad <dojo/addOnLoad>`_.
* See also `dojo.ready <dojo/ready>`_


dojo.replace
------------

* A new flexible facility for simple templating based on substitutions.
* See `dojo.replace <dojo/replace>`_ for more information.

dojo.safeMixin
--------------

* A companion for `dojo.declare <dojo/declare>`_. It is similar to `dojo.mixin <dojo/mixin>`_ but decorates copied methods compatibly with `dojo.declare <dojo/declare>`_.


======
Dijit
======

top level widgets
-----------------

dijit.Tree
~~~~~~~~~~

* dijit._tree.dndSource moved to dijit.tree.dndSource (since it's supposed to be used publicly)
* Lots of cleanup and bug fixes around DnD related code
* Multi-character search. Typing "al" will jump directly to first node starting with "al".
* new Path and selectedItem attributes to get/set the current tree item (`#9339 <http://bugs.dojotoolkit.org/ticket/9339>`_)
* Multi-parented items support. Tree can support items with multiple parents, as long as this doesn't cause a loop. (`#9361 <http://bugs.dojotoolkit.org/ticket/9361>`_)
* Deferred child load option on TreeStoreModel. Option added to deferring calling loadItem() on a data store item until it's children need to be read. Performance boost for JsonRestStore. (`#9575 <http://bugs.dojotoolkit.org/ticket/9575>`_)
* getTooltip() method can set tooltip on each tree node
* onLoad() event when tree is fully loaded
* autoExpand=true flag to initially expand all nodes in the tree
* ability to add a CSS class to the root node of a tree item.
* See also `dijit.Tree <dijit/Tree>`_

dijit.Editor
~~~~~~~~~~~~

* The RTE has had numerous bug fixes applied to it as well as some code cleanup to make it more extensible and better behaving on browsers such as Opera. It also had several new plugin modules added to dijit, as well as several new ones added to DojoX. For information on the DojoX modules, see the DojoX section of these release notes.

  * **Updated Plugins**

    * `LinkDialog <dijit/_editor/plugins/LinkDialog>`_:  The plugin that provides the dialog support for insert image and insert link have been considerably updated. Input is better validated, invalid values will disable set, and it will auto-append http:// if it believes you have typed only part of a url.

  * **New Plugins**

    * `FullScreen <dijit/_editor/plugins/FullScreen>`_:  A plugin that adds the capability to the editor to take over the complete viewport containing the page running the editor.
    * `ViewSource <dijit/_editor/plugins/ViewSource>`_:  A plugin that lets you toggle the editor view between HTML source and RTE modes.
    * `Print <dijit/_editor/plugins/Print>`_:  A plugin that lets you print the contents of the editor frame.
    * `NewPage <dijit/_editor/plugins/NewPage>`_:  A plugin that lets you clear the content of the editor and set a new default content with a button click.

* In addition to the new plugins, the editor icons have all been updated! They are much cleaner and professional.
* See also `dijit.Editor <dijit/Editor>`_

dijit.Dialog
~~~~~~~~~~~~

* Multiple dialogs can now be shown (with one dialog launching over another).
* Dialog supports aria-describedby to make it more accessible to screen readers.
* See also `dijit.Dialog <dijit/Dialog>`_

dijit.Menu
~~~~~~~~~~

* Sliding the mouse diagonally from a vertical menu to a second vertical menu will no longer close the second menu if the mouse temporarily moves off of both menus. (This happens when the MenuItem in the second menu is below the bottom of the first Menu.) ( (`#6773 <http://bugs.dojotoolkit.org/ticket/6773>`_)
* See also `dijit.Menu <dijit/Menu>`_

dijit.TitlePane
~~~~~~~~~~~~~~~

* toggleable attribute to control whether or not user can close the TitlePane. Useful for non-closable TitlePane's in a app that match the styling of the other TitlePanes (and other dijit components)
* tooltip attribute to control tooltip on title bar
* See also `dijit.TitlePane <dijit/TitlePane>`_

dijit.Tooltip
~~~~~~~~~~~~~

* addTarget()/removeTarget() methods to dynamically attach/detach the tooltip from various nodes.
* See also `dijit.Tooltip <dijit/Tooltip>`_

dijit.Calendar
~~~~~~~~~~~~~~

* The previously available widget dijit._Calendar was promoted to a public object and therefore renamed from dijit._Calendar to dijit.Calendar.
* Calendar standalone widget now supports accessibility with ARIA and keyboard. Users can select a date in the calendar using arrow keys, and page-down/up for month navigation. There is also a dropdown at the month label to change the month. DateTextBox still relies on the input control for a11y and does not transfer focus to the calendar popup.
* See also `dijit.Calendar <dijit/Calendar>`_

dijit.layout
------------

dijit.layout.TabContainer / dijit.layout.AccordionContainer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* scrolling tab labels now supported (like on Firefox etc.) so that labels don't spill over to two rows when there isn't enough space
* tab labels / pane titles can be changed via pane.attr('title', ...)
* icons added, controlled via iconClass parameter (like for Buttons and MenuItems). To display only icons set showTitle=false.
* tooltip attribute controls tooltip on tab labels or accordion pane titles
* See also `dijit.layout.TabContainer <dijit/layout/TabContainer>`_

dijit.layout.ContentPane
~~~~~~~~~~~~~~~~~~~~~~~~

* ContentPane now acts as a full layout widget, calling resize() on it's child widgets when (not before) it is made visible, avoiding problems with children being initialized while hidden.
* Consequently ContentPane now defines isLayoutContainer to true
* Fixes related to resizing and href loading, including avoiding premature href loading for ContentPanes in nested TabContainers
* See also `dijit.layout.ContentPane <dijit/layout/ContentPane>`_

dijit.form
----------

onChange event handling
~~~~~~~~~~~~~~~~~~~~~~~

Most dijit.form widgets fire the onChange event after a value change has been detected. With some widgets, this event fired synchronously before the attr('value',val) returned, while on other widgets, the event was asynchronous. In order to return control to the browser's UI thread sooner, and also to collapse onChange events that fire faster tha the user handler can execute, the events will always fire asynchronously now, and consecutive, unprocessed onChange events will be collapsed into single events. User code that assumed onChange would always fire synchronously after a value change will have to be modified.

attr("value", val, false)
~~~~~~~~~~~~~~~~~~~~~~~~~
attr() (as a setter) has been enhanced to take optional arguments.   The most common case for this is attr("value", val, false) which sets the value of a form widget without calling onChange().   (The third argument is called priorityChange.)

dijit.form.Button
~~~~~~~~~~~~~~~~~

* Although not related to the Dojo 1.4 release per-se, note that to support IE8 all dijit.form.Button's declared in markup must have type=button (unless they are intended as submit buttons). This is to work around an IE8 problem where the parser can't distinguish between an explicit type=submit and an implicit one. (The default type for <button> tags is submit, according to the latest HTML spec.)

dijit.form.ComboButton
~~~~~~~~~~~~~~~~~~~~~~

* A new parameter dropDownPosition was added.
* The parameter controls where the drop down appears, as usual searching a list of positions until somewhere is found where the drop down fits.
* Example: dropDownPosition="top,bottom"
* See also `dijit.form.ComboButton <dijit/form/ComboButton>`_

dijit.form.DropDownButton
~~~~~~~~~~~~~~~~~~~~~~~~~

* A new parameter dropDownPosition was added.
* The parameter controls where the drop down appears, as usual searching a list of positions until somewhere is found where the drop down fits.
* Example: dropDownPosition="top,bottom"
* See also `dijit.form.DropDownButton <dijit/form/DropDownButton>`_

dijit.form.NumberSpinner
~~~~~~~~~~~~~~~~~~~~~~~~

* The NumberSpinner widget has changed the **required** attribute default value from true to false to more consistently allow for unspecified values within a FORM.
* See also `dijit.form.NumberSpinner <dijit/form/NumberSpinner>`_

dijit.form.Select
~~~~~~~~~~~~~~~~~

* dojox.form.DropDownSelect has been moved to dijit.form.Select as a styled HTML <select> replacement.
* See also `dijit.form.Select <dijit/form/Select>`_

dijit.form.TextBox
~~~~~~~~~~~~~~~~~~

* selectOnClick attribute added to `dijit.form.TextBox <dijit/form/TextBox>`_ and all descendant form widgets, selecting all the text in the field just by clicking.
* This makes it easier for users to change the value: just click and type.
* See also `dijit.form.TextBox <dijit/form/TextBox>`_

Dijit infrastructure changes
----------------------------

dijit._Templated
~~~~~~~~~~~~~~~~

* widgetsInTemplate widget lifecycle: lots of bug fixes around the lifecycle for widgets in templates. startup() is now called on widgets in templates when startup() is called on the main widget. Templated Layout widgets with widgets in their templates should call resize() on those widgets manually.
* templatePath has been deprecated in favor of templateString used with dojo.cache(), see above.

dijit.WidgetSet enhancements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* dijit.WidgetSet/dijit.registry now has a .length property, and new array-like functions: 
  * toArray, 
  * some, 
  * every, 
  * and map. 
* forEach now returns instance for chaining.
* forEach, some, every, filter and map now accept a 'thisObj' as second or third param (after callback)


=====
DojoX
=====

dojox.charting.DataChart
------------------------

* The new DataChart simplifies the task of connecting Data Stores to a Chart.
* See also `dojox.charting.DataChard <dojox/charting/DataChart>`_

dojox.drawing
-------------

* A new drawing tool has landed in DojoX. 
* dojox.drawing is similar to Sketch, but with an extensible architecture that allows for plugins.
* See also `dojox.drawing <dojox/drawing>`_


dojox.editor.plugins
--------------------

Several new plugins for the dijit.Editor RTE have been provided as dojox modules. They are all generally well tested and work good across browsers.

* `PrettyPrint <dojox/editor/plugins/PrettyPrint>`_:  A plugin that formats the output from dijit.Editor more cleanly than the browsers defaults.
* `PageBreak <dojox/editor/plugins/PageBreak>`_:  A plugin that lets you insert CSS style page breaks so when printed, the document page breaks at the indicated spot.
* `ShowBlockNodes <dojox/editor/plugins/ShowBlockNodes>`_:  A plugin that lets you see in the editor what the block structure is that makes up the RTE document.
* `Preview <dojox/editor/plugins/Preview>`_:  A plugin that lets you preview the editor content in a separate window with different CSS styles and stylesheets applied than what are used in the editor.
* `Save <dojox/editor/plugins/Save>`_:  A plugin that simplifes adding a save toolbar action for posting editor content back to a specified url.
* `ToolbarLineBreak <dojox/editor/plugins/ToolbarLineBreak>`_:  A simple plugin that provides a way to break the editor toolbar into multiple lines.
* See also `dojox.editor.plugins <dojox/editor/plugins>`_


dojox.encoding.crypto.RSAKey
----------------------------

* JavaScript implementation of RSA by Tom Wu. Ported as an experimental module. 
* See http://www-cs-students.stanford.edu/~tjw/jsbn/ for details.

dojox.form
----------

dojox.form._HasDropDown
~~~~~~~~~~~~~~~~~~~~~~~

* This widget has been moved to `dijit._HasDropDown <dijit/_HasDropDown>`__.

dojox.form._FormSelectWidget
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* This widget has been moved to `dijit.form._FormSelectWidget <dijit/form/_FormSelectWidget>`__.


dojox.form.DropDownSelect
~~~~~~~~~~~~~~~~~~~~~~~~~

* This widget has been moved to `dijit.form.Select <dijit/form/Select>`__.

dojox.form.FileUploader
~~~~~~~~~~~~~~~~~~~~~~~

* The improved FileUploader actually landed in a "dot release", 1.3.1, but 1.4 adds some bug fixes. The new FileUploader adds many features, and the display is now quite robust. The Flash uploader is now an actual Flash button with an emulated HTML style, so that it can be used in cases where it was broken before, like in scrolling boxes. The HTML uploader too has been improved so that it is not floating on the page, allowing for more complex display cases and less UI breakage.
* See also `dojox.form.FileUploader <dojox/form/FileUploader>`_


dojox.fx
--------

* API change to dojox.fx.style functions. dojox.fx.addClass/toggleClass/removeClass now match dojo.addClass/toggleClass/removeClass API's. Documentation added, still experimental.
* Added dojox.fx.ext-dojo.NodeList-style module, mapping dojox.fx.style functions into dojo.NodeList

dojox.gfx
---------

* dojox.gfx.utils.toSvg - serialize a dojox.gfx surface as a string in SVG format for all browsers (including IE).
* New XSLT file (``dojox/gfx/resources/svg2gfx.xsl``) to transform bigger subset of SVG to the ``dojox.gfx`` JSON-based serialization format by Eric W. Brown.

dojox.grid
----------

* Screen reader support has degraded when using JAWS 10 due to a change in the way ARIA (Accessible Rich Internet Applications) has been implemented in the grid. The grid column header cells no longer get actual focus since that was preventing proper scrolling via the mouse.
* Due to this change, if focus is in a grid data cell and the user shift-tabs back to the column header, JAWS 10 will not speak the column header text.  This will be fixed with the next release of JAWS and Firefox which should provide better screen reader support for ARIA enabled grids.

dojox.grid.EnhancedGrid
~~~~~~~~~~~~~~~~~~~~~~~

The new Enhanced DataGrid extends the base grid in numerous useful ways.

* Nested Sort:  The user can now concurrently sort on any number of columns.
* Multiple Column/Row Selection: The user can now select multiple columns or rows through swipe-select or extended selection techniques.
* Drag-drop Multiple Columns and Rows: The user can now move multiple columns or rows in the same action.
* Indirect Selection: Rather than having to manually include radio buttons and check boxes for single and multiple selection models, the Enhanced DataGrid will do it automatically in response to the inclusion of simple attribute-value pairs, e.g., indirectSelection=true, on the grid's div tag.
* Declarative Pop-up Menus: Rather than having to create and assign pop-up menus through scripts, the enhanced DataGrid allows you to specify these menus with straightforward markup.
* See also `dojox.grid.EnhancedGrid <dojox/grid/EnhancedGrid>`_

dojox.grid.Treegrid
~~~~~~~~~~~~~~~~~~~

* dojox.grid.TreeGrid - support for collapsable rows and model-based (dijit.tree.ForestStoreModel) structure.
* See also `dojox.grid.Treegrid <dojox/grid/Treegrid>`_

(old) compat grid
~~~~~~~~~~~~~~~~~
* compat grid (dojox.grid.Grid) is now bundled in the dojox/grid directory as a tarball archive for those who would like to continue using the deprecated (1.1) Grid. dojox.grid.DataGrid is the replacement.


dojox.image
-----------

* Significant fixes and improvements in dojox.image.Lightbox. see: `[17205] <http://bugs.dojotoolkit.org/changeset/17205>`_
* Bug fixes for dojox.image.SlideShow to deal with autoLoad and autoStart issues. see `[20285] <http://bugs.dojotoolkit.org/changeset/20285>`_
* Extended the dojox.image.LightboxNano to show more than one image with a single LBN instance.

dojox.jq
--------

* dojox.jq is a very experimental module aimed at trying to match the jQuery API as close as possible, but using Dojo underneath. It is still very rough, and there is no fx API support yet.


dojox.layout
------------

* dojox.layout.ContentPane.attr('href', ...) now returns a dojo.Deferred rather than a dojox.layout.ContentPane.DeferredHandle custom class. The dojo.Deferred triggers when the load completes (or errors out).

* dojo.layout.GridContainer styles changed, with red borders removed and theme-specific drop indicators added.

dojox.math.BigInteger
---------------------

* Implementation of arbitrary large integer numbers by Tom Wu. Ported as an experimental module. See http://www-cs-students.stanford.edu/~tjw/jsbn/ for details.

dojox.widget
------------

* dojox.widget.Portlet added. An extended version of the dijit.TitlePane, designed to be used with the dojox.layout.GridContainer.
* dojox.widget.Rotator and dojox.widget.AutoRotator added. The rotator is a lightweight non-dijit widget that rotates through child nodes. Support for pan, slide, wipe, and fade transitions. Includes dojox.widget.rotator.Controller for manipulating a rotator.
* Bug fixes for dojox.widget.Calendar3Pane, which now selects the correct year.


====
Util
====

Build System/buildscripts
-------------------------
Using Google's Closure Compiler is now supported in the build system. See the `Advanced Build Topics docs <build/index#using-google-s-closure-compiler>`_.

Checkstyle
----------
A Checkstyle tool has been added in util/checkstyle. This can be used to both flag style guide violations in either Dojo or custom JavaScript code, and also to fix the errors using an online tool.


=========
Bug fixes
=========

The `full list of bug fixes <http://bugs.dojotoolkit.org/query?status=closed&group=component&order=priority&milestone=1.4&resolution=fixed&col=id&col=summary&col=type&col=priority>`_ is located in the bug database.

=========
Upgrading
=========

Here are some common issues people have had when upgrading (ie, migrating) from 1.3 to 1.4:

1. if your widgets are using templatePath you should ideally update them to use templateString with dojo.cache() instead, or alternately, minimally, make sure that they set templateString to null (to override the templateString setting from a superclass).
2. ContentPane acts more as a layout widget than before, defining isLayoutContainer: true. This may break some custom subclasses.
3. the startup code for widgetsInTemplate has changed; if you have a custom widget that manually adds sub-widgets into it's DOM, be sure to add those sub-widgets to this._startupWidgets[] and also this._supportingWidgets[]. Alternately you can set _earlyTemplatedStartup to true to get the 1.3 behavior
