.. _quickstart/internationalization/resource-bundling:

=============================
Translatable Resource bundles
=============================

:Authors: Adam Peller
:since: 1.7

.. contents ::
   :depth: 2

Introduction
============

:ref:`dojo.i18n <dojo/i18n>` solves a problem in Javascript: with a significant amount of logic now on the client, there are internationalization issues which cannot easily be solved by server-driven templates.  Furthermore, a server-based solution for dynamic content is difficult to manage and couples the client-side toolkit to a particular server architecture, making it difficult to share Javascript components or widgets.  With a client-side internationalization framework, the integration point moves to the browser where simple or complex logic can be applied without becoming a bottleneck. This architecture also encourages encapsulation and efficient caching both at edge servers and in the browser. And, while all translations are present on the server, rest assured that only those which match the user's locale are requested by the client and sent over the wire.

To internationalize a web application with Dojo, a combination of client and server techniques are typically required.  The methods used in Dojo to substitute localized resources are intended for dynamic content generated by Javascript. It is usually best to continue using a server-side mechanism to localize static page content, rather than trying to generate all page content through Dojo and Javascript.

Dojo and Dijit provide resource bundles for all strings which are made visible to the user on the page, with translations provided in many languages.  Those augmenting Dojo or writing their own widgets may to create and translate their own set of resources, as needed.  Error information, such as that sent to a browser console, are not translated.


Localizing Strings
==================

With the introduction of AMD-style loading in Dojo 1.7, localized content is loaded much like Javascript modules, using the dojo/i18n! plugin as follows:

dojo.requireLocalization() / dojo.i18n.getLocalization()
  these methods leverage :ref:`Dojo's package concept <dojo/require>` to load localized resources. Each translated resource is implemented as a file containing a Javascript Object (see JSON notation) where each property may be a string or any other Javascript type. Resources are located within the directory structure beneath a specially named "nls" directory (short for native language support). Each translation is made available in a subdirectory named by locale.

dojo.requireLocalization
------------------------

:ref:`dojo.requireLocalization() <dojo/requireLocalization>` is used to declare usage of these resources and load them in the same way that dojo.requires() pulls in Javascript packages, but using the translation appropriate to the caller. The location of the bundle is specified using two arguments: the first is the directory structure containing the nls directory; the second is the name of the file in that directory containing the localized resources. The locale used is discovered at runtime from the browser, or specified by an override in :ref:`dojoConfig <dojo/config>`. If :ref:`dojoConfig.extraLocale <dojo/config>` is set, the localizations in that list will be loaded also.

dojo.i18n.getLocalization
-------------------------

Use :ref:`dojo.i18n.getLocalization() <dojo/i18n>` to get a reference to the object representing the localized resources. The resources loaded by dojo.requireLocalization() are searched and one best matching the user's locale are used. The localized values will be available as properties on the returned object. For example:

.. js ::

   // TODO: replace this example with the strings from dojo.color when translations are available
   dojo.require("dojo.i18n");
   dojo.requireLocalization("dijit.form", "validate");
   var validate = dojo.i18n.getLocalization("dijit.form", "validate");
   console.log(validate.invalidMessage);


For an English-speaking user, the example above will display the value for invalidMessage from dijit/form/validate.js:

"* The value entered is not valid."

The root happens to have the English translation, which also acts as a fallback for any unsupported locales (English was an arbitrary choice, but the one commonly used in Dojo). Therefore, no translations were found in the en or en-us directories as they would have been redundant. Meanwhile, a Japanese user in the ja-jp locale will see the value in dijit/form/nls/ja, which is the best match for that locale:

"* 入力したデータに該当するものがありません。"

Translation subdirectories are searched and mixed in such a way that variants can specify overrides for some or all of their parent locale. Because the search requires looking for translations under both the language as well as variants, sometimes a 404 will occur; this is normal and can be optimized at build time.


See also
========

* :ref:`dojo.i18n <dojo/i18n>`
* :ref:`dojo.requireLocalization <dojo/requireLocalization>`
* :ref:`dojo.i18n.getLocalization <dojo/i18n>`
* :ref:`Language and Localization Settings in dojoConfig <dojo/config>`
